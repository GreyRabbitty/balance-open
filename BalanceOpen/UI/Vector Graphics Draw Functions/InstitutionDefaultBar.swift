//
//  InstitutionHeaderBarsDefault.swift
//  Balance
//
//  Created by Team Balance on 9/26/16.
//  Copyright (c) 2016 Balance. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

import Foundation

extension InstitutionHeaderBars {

    //// Drawing Methods

    public class func drawDefaultHeader(frame: NSRect = NSMakeRect(0, 0, 400, 28), backgroundColor: NSColor, foregroundColor: NSColor, font: NSFont, name: String) {
        //// General Declarations
        let context = unsafeBitCast(NSGraphicsContext.current()!.graphicsPort, to: CGContext.self)

        //// Color Declarations
        let black = NSColor(deviceRed: 0, green: 0, blue: 0, alpha: 1)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.06)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let headerShadow = NSShadow()
        headerShadow.shadowColor = black.withAlphaComponent(0.12 * black.alphaComponent)
        headerShadow.shadowOffset = NSMakeSize(0.1, -1.6)
        headerShadow.shadowBlurRadius = 3
        let smallHeaderShadow = NSShadow()
        smallHeaderShadow.shadowColor = NSColor.black.withAlphaComponent(0.06)
        smallHeaderShadow.shadowOffset = NSMakeSize(0.1, -1.1)
        smallHeaderShadow.shadowBlurRadius = 1


        //// Subframes
        let group: NSRect = NSMakeRect(frame.minX + floor(frame.width * 0.00000 + 0.5), frame.minY + floor(frame.height * 0.14286 + 0.5), floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), floor(frame.height * 0.92857 + 0.5) - floor(frame.height * 0.14286 + 0.5))


        //// Group
        NSGraphicsContext.saveGraphicsState()
        smallHeaderShadow.set()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// headerBase Drawing
        let headerBasePath = NSBezierPath()
        headerBasePath.move(to: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.50000 * group.height))
        headerBasePath.line(to: NSMakePoint(group.minX + 1.00000 * group.width, group.minY + 0.50000 * group.height))
        headerBasePath.line(to: NSMakePoint(group.minX + 1.00000 * group.width, group.minY + 0.81818 * group.height))
        headerBasePath.curve(to: NSMakePoint(group.minX + 0.99000 * group.width, group.minY + 1.00000 * group.height), controlPoint1: NSMakePoint(group.minX + 1.00000 * group.width, group.minY + 0.91860 * group.height), controlPoint2: NSMakePoint(group.minX + 0.99552 * group.width, group.minY + 1.00000 * group.height))
        headerBasePath.line(to: NSMakePoint(group.minX + 0.01000 * group.width, group.minY + 1.00000 * group.height))
        headerBasePath.curve(to: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.81818 * group.height), controlPoint1: NSMakePoint(group.minX + 0.00448 * group.width, group.minY + 1.00000 * group.height), controlPoint2: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.91860 * group.height))
        headerBasePath.line(to: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.50000 * group.height))
        headerBasePath.close()
        headerBasePath.move(to: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.06818 * group.height))
        headerBasePath.curve(to: NSMakePoint(group.minX + 0.00375 * group.width, group.minY + 0.00000 * group.height), controlPoint1: NSMakePoint(group.minX + -0.00000 * group.width, group.minY + 0.03053 * group.height), controlPoint2: NSMakePoint(group.minX + 0.00168 * group.width, group.minY + 0.00000 * group.height))
        headerBasePath.line(to: NSMakePoint(group.minX + 0.99625 * group.width, group.minY + 0.00000 * group.height))
        headerBasePath.curve(to: NSMakePoint(group.minX + 1.00000 * group.width, group.minY + 0.06818 * group.height), controlPoint1: NSMakePoint(group.minX + 0.99832 * group.width, group.minY + 0.00000 * group.height), controlPoint2: NSMakePoint(group.minX + 1.00000 * group.width, group.minY + 0.03053 * group.height))
        headerBasePath.line(to: NSMakePoint(group.minX + 1.00000 * group.width, group.minY + 0.50000 * group.height))
        headerBasePath.line(to: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.50000 * group.height))
        headerBasePath.line(to: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.06818 * group.height))
        headerBasePath.close()
        NSGraphicsContext.saveGraphicsState()
        headerShadow.set()
        backgroundColor.setFill()
        headerBasePath.fill()
        NSGraphicsContext.restoreGraphicsState()



        //// headerHighlight Drawing
        let headerHighlightPath = NSBezierPath()
        headerHighlightPath.move(to: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.50000 * group.height))
        headerHighlightPath.line(to: NSMakePoint(group.minX + 1.00000 * group.width, group.minY + 0.50000 * group.height))
        headerHighlightPath.line(to: NSMakePoint(group.minX + 1.00000 * group.width, group.minY + 0.81818 * group.height))
        headerHighlightPath.curve(to: NSMakePoint(group.minX + 0.99000 * group.width, group.minY + 1.00000 * group.height), controlPoint1: NSMakePoint(group.minX + 1.00000 * group.width, group.minY + 0.91860 * group.height), controlPoint2: NSMakePoint(group.minX + 0.99552 * group.width, group.minY + 1.00000 * group.height))
        headerHighlightPath.line(to: NSMakePoint(group.minX + 0.01000 * group.width, group.minY + 1.00000 * group.height))
        headerHighlightPath.curve(to: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.81818 * group.height), controlPoint1: NSMakePoint(group.minX + 0.00448 * group.width, group.minY + 1.00000 * group.height), controlPoint2: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.91860 * group.height))
        headerHighlightPath.line(to: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.50000 * group.height))
        headerHighlightPath.close()
        headerHighlightPath.move(to: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.06818 * group.height))
        headerHighlightPath.curve(to: NSMakePoint(group.minX + 0.00375 * group.width, group.minY + 0.00000 * group.height), controlPoint1: NSMakePoint(group.minX + -0.00000 * group.width, group.minY + 0.03053 * group.height), controlPoint2: NSMakePoint(group.minX + 0.00168 * group.width, group.minY + 0.00000 * group.height))
        headerHighlightPath.line(to: NSMakePoint(group.minX + 0.99625 * group.width, group.minY + 0.00000 * group.height))
        headerHighlightPath.curve(to: NSMakePoint(group.minX + 1.00000 * group.width, group.minY + 0.06818 * group.height), controlPoint1: NSMakePoint(group.minX + 0.99832 * group.width, group.minY + 0.00000 * group.height), controlPoint2: NSMakePoint(group.minX + 1.00000 * group.width, group.minY + 0.03053 * group.height))
        headerHighlightPath.line(to: NSMakePoint(group.minX + 1.00000 * group.width, group.minY + 0.50000 * group.height))
        headerHighlightPath.line(to: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.50000 * group.height))
        headerHighlightPath.line(to: NSMakePoint(group.minX + 0.00000 * group.width, group.minY + 0.06818 * group.height))
        headerHighlightPath.close()
        highlightGradient.draw(in: headerHighlightPath, angle: -45)


        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()


        //// Text Drawing
        let textRect = NSMakeRect(frame.minX + floor(frame.width * 0.05000 + 0.5),
                                  frame.minY + floor(frame.height * 0.21429 + 0.5),
                                  floor(frame.width * 0.95000 + 0.5) - floor(frame.width * 0.05000 + 0.5),
                                  floor(frame.height * 0.87500) - floor(frame.height * 0.21429 + 0.5) + 1.0)
        let textStyle = NSParagraphStyle.default().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .center
        textStyle.lineBreakMode = .byTruncatingTail
        
        let textFontAttributes = [NSFontAttributeName: font,
                                  NSForegroundColorAttributeName: foregroundColor,
                                  NSParagraphStyleAttributeName: textStyle]
        
        let textTextHeight: CGFloat = name.boundingRect(with: NSMakeSize(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: textFontAttributes).size.height
        let textTextRect: NSRect = NSMakeRect(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        name.draw(in: NSOffsetRect(textTextRect, 0, 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()
    }

}
